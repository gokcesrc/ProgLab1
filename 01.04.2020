import random
random.random()
##############LESSON 1 LİST HİSTOGRAM
def get_n_random_numbers(n=10,min_=-5,max_=5):
    numbers=[]
    for i in range(n):
        numbers.append(random.randint(min_,max_))
    return numbers
my_list=get_n_random_numbers()
print(my_list)
x=sorted(my_list)
print(x)
def my_frequency_with_dict(list):
    frequency_dict={}
    for item in list:
        if(item in frequency_dict):
            frequency_dict[item]=frequency_dict[item]+1
        else:
            frequency_dict[item]=1
    return frequency_dict
#a=my_frequency_with_dict(my_list)
#print(a)

def my_frequency_with_list_of_tuples(list_1):
    frequency_list=[]
    for i in range(len(frequency_list)):
        s=False
        if(list_1[i]==frequency_list[j][0]):
            frequency_list[j][1]=frequency_list[j][1]+1
            s=True
        if(s==False):
            frequency_list.append(list_1,1)
    return frequency_list

result_1=my_frequency_with_dict(my_list)
result_2=my_frequency_with_list_of_tuples(x)
print(result_1)
print(result_2)

#######################LESSON 2 MODE FROM TWO STRUCTURES
print("****************************************************************")

def my_mode_with_dict(my_hist_d):
    frequency_max=-1
    mode=-1
    for key in my_hist_d.keys():
        print(key,my_hist_d[key])
        if my_hist_d[key]>frequency_max:
            frequency_max=my_hist_d[key]
            mode=key
    return frequency_max,mode

my_list_100=get_n_random_numbers(10,-4,4)
my_hist_1=my_frequency_with_dict(my_list_100)
print(my_mode_with_dict(my_hist_1))

def my_mode_with_list(my_hist_list):
    frequency_max=-1
    mode=-1
    for item , frequency in my_hist_list:
        print(item,frequency)
        if frequency>frequency_max:
            frequency_max=frequency
            mode=item
    return mode,frequency_max
my_list_100=get_n_random_numbers(10,-5,5)
my_hist_1=my_frequency_with_list_of_tuples(my_list_100)
print(my_mode_with_list(my_hist_1))
print("**********************************************************************")

#LESSON 3 BİNARY SEARCH BUBBLE MEDİAN

###Linear Search On List
def my_search(my_list,item_search):
    found = (-1, -1)
    n = len(my_list)
    for indis in range(n):
        if my_list[indis] == item_search:
            found = (my_list[indis], indis)
    return found
print(my_list)
print(my_search(my_list,3))

##3 Mean of List
def my_mean(my_list):
    s,t=0,0
    for item in my_list:
        s=s+1
        t=t+item
    mean=t/s
    return mean
my_list=get_n_random_numbers(10,-50,50)
print(my_list)
my_mean(my_list)

##Sort the List
def bubble_sort(my_list):
    n=len(my_list)
    print(my_list)
    for i in range(n-1,-1,-1):
        for j in range(0,1):
            if not (my_list[j]<my_list[j+1]):
                temp=my_list[j]
                my_list[j]=my_list[j+1]
                my_list[j+1]=temp
    return my_list

my_list=get_n_random_numbers(4,-5,5)
print(my_list)
print(bubble_sort(my_list))

##Binary Search on a Sorted List
def my_binary_search(my_list,item_search):
    found=(-1,-1)
    low=0
    high=len(my_list)-1
    while low<=high:
        mid=(low+high)//2
        if my_list[mid]==item_search:
            return my_list[mid],mid
        elif my_list[mid]>item_search:
            high=mid-1
        else:
            low=mid+1
    return found
my_list_1=get_n_random_numbers(10)
print("liste",my_list_1)
my_list_2=bubble_sort(my_list_1)
print("sirali liste",my_list_2)
print(my_binary_search(my_list_2,3))

##Median of a list

def my_median(my_list):
    my_list_2=bubble_sort(my_list_1)
    print(my_list_2)
    n=len(my_list_2)
    if n%2==1:
        middle=int(n/2)+1
        median=my_list_2[middle]
        print(median)
    else:
        middle_1=my_list_2[int(n/2)]
        middle_2=my_list_2[int(n/2)+1]
        median=(middle_1+middle_2)/2
    return median

my_list_2=get_n_random_numbers(5,-10,10)
print(my_median(my_list_2))
